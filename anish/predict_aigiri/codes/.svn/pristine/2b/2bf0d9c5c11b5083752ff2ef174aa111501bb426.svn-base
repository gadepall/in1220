{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Telugu.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "xWb2I2h0gr6D",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "410e72ae-225f-44c6-ac7b-be33edafb457"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "44OV7y7DI-15",
        "outputId": "d04a0b2f-b348-48aa-a3cf-6e94a6be46f3"
      },
      "source": [
        "cd drive/MyDrive/'Colab Notebooks'/telugu_nlp"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content/drive/MyDrive/Colab Notebooks/telugu_nlp\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lgk94yluY90c"
      },
      "source": [
        "!pip install indic-nlp-library\n",
        "!pip install inltk"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lXWTQioEyisH"
      },
      "source": [
        " import matplotlib.pyplot as plt\n",
        " from sklearn.cluster import KMeans\n",
        " from sklearn.metrics import silhouette_score\n",
        " from sklearn.preprocessing import StandardScaler\n",
        " from sklearn.utils import shuffle\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.metrics import silhouette_score, adjusted_rand_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.preprocessing import LabelEncoder, MinMaxScaler"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1W8c5P3uJNo2"
      },
      "source": [
        "stothram_file = open('aigiri.txt', 'r')\n",
        "stothram_txt = stothram_file.read()\n",
        "stothram_file.close()\n",
        "\n",
        "chalisa_file = open('hanuman_chalisa.txt', 'r')\n",
        "chalisa_txt = chalisa_file.read()\n",
        "chalisa_file.close()"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "817tIwVDKRd5"
      },
      "source": [
        "pattern_list = []\n",
        "\n",
        "def get_sloka_from_stothram(stothram_txt):\n",
        "  slokams = []\n",
        "  for sloka in stothram_txt.split('||'):\n",
        "    if not sloka.replace(' ', '').isnumeric() and not sloka == '\\n' and not sloka == '':\n",
        "      slokams.append( sloka.replace('|', '').replace('\\n', '') )\n",
        "  return slokams\n",
        "\n",
        "def gen_patterns(slokams):\n",
        "  global pattern_list\n",
        "  for sloka in slokams:\n",
        "    temp = {}\n",
        "    for words in sloka.split():\n",
        "      for char in words:\n",
        "        if char in temp.keys():\n",
        "          temp[char] = temp[char] + 1\n",
        "        else:\n",
        "          temp[char] = 1 \n",
        "    pattern_list.append(temp)\n",
        "\n",
        "def to_find_accuracy(predicted, actual):\n",
        "  if len(predicted) == len(actual):\n",
        "    right = 0\n",
        "    for i in range(len(actual)):\n",
        "      if predicted[i] == actual[i]:\n",
        "        right = right + 1\n",
        "    print('accuracy: ', right/len(actual))"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9gU2i2lGgQPf"
      },
      "source": [
        "aigiri = get_sloka_from_stothram(stothram_txt)\n",
        "chalisa = get_sloka_from_stothram(chalisa_txt)"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HJFiifa1lUgK"
      },
      "source": [
        "gen_patterns(aigiri)\n",
        "gen_patterns(chalisa)"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y0flLd_jqOq5"
      },
      "source": [
        "df = pd.DataFrame(pattern_list).fillna(0)\n",
        "df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h-MOH3e0kNM_"
      },
      "source": [
        "x = df.values\n",
        "y = np.concatenate((np.ones(21), np.zeros(21)))"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qd9D071Judnx"
      },
      "source": [
        "x, y = shuffle(x, y)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zqieTbSwI3wa"
      },
      "source": [
        "preprocessor = Pipeline(\n",
        "    [\n",
        "      (\"scaler\", MinMaxScaler()),\n",
        "      (\"pca\", PCA(n_components=2, random_state=42)),\n",
        "    ]\n",
        "   )"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NCXiYuTxJI3j"
      },
      "source": [
        "clusterer = Pipeline(\n",
        "   [\n",
        "       (\n",
        "           \"kmeans\",\n",
        "           KMeans(\n",
        "               n_clusters = 2,\n",
        "               init=\"k-means++\",\n",
        "               n_init=50,\n",
        "               max_iter=500,\n",
        "               random_state=42,\n",
        "           ),\n",
        "       ),\n",
        "   ]\n",
        ")"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SqPg_xeCJr-f"
      },
      "source": [
        "pipe = Pipeline(\n",
        "    [\n",
        "        (\"preprocessor\", preprocessor),\n",
        "        (\"clusterer\", clusterer)\n",
        "    ]\n",
        ")"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8t2KGDnoJust"
      },
      "source": [
        "pipe.fit(x)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0jEcFOHvKU_H",
        "outputId": "aed9b59d-8a0a-4878-87fe-b36e9802fc12"
      },
      "source": [
        "to_find_accuracy(pipe[\"clusterer\"][\"kmeans\"].labels_, y)"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "accuracy:  1.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WGk7TB8CQ6BY",
        "outputId": "f086bdc9-d61b-4fe5-8060-51617d2a9793"
      },
      "source": [
        "preprocessed_data = pipe[\"preprocessor\"].transform(x)\n",
        "predicted_labels = pipe[\"clusterer\"][\"kmeans\"].labels_\n",
        "\n",
        "silhouette_score(preprocessed_data, predicted_labels)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7223524749093777"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j-zDSc9FRIQD",
        "outputId": "52fb0d62-109c-46f9-b1fb-4b672790d83e"
      },
      "source": [
        "adjusted_rand_score(y, predicted_labels)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "gc3gCju4MGl1",
        "outputId": "26e9cce6-6757-4e97-8dd1-b11e38d71723"
      },
      "source": [
        "plt.plot( preprocessed_data[21:, 0], preprocessed_data[21:, 1], 'og', preprocessed_data[:21, 0] , preprocessed_data[:21, 1], \"ob\", pipe[\"clusterer\"][\"kmeans\"].cluster_centers_[:, 0], pipe[\"clusterer\"][\"kmeans\"].cluster_centers_[:, 1], 'or' )\n",
        "plt.show() "
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E3pG4kgcJ_Zm",
        "outputId": "e0cba985-bdba-406b-c1e9-b50a797f345f"
      },
      "source": [
        "pipe[\"clusterer\"][\"kmeans\"].cluster_centers_"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.96524892,  0.02311122],\n",
              "       [ 0.96524892, -0.02311122]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    }
  ]
}